<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat & Video Call</title>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/8.2.2/adapter.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center h-screen">

  <!-- Chat Container -->
  <div class="w-full max-w-3xl h-[90vh] bg-white shadow-2xl rounded-2xl flex flex-col overflow-hidden">

    <!-- Header -->
    <div class="flex justify-between items-center px-6 py-4 bg-blue-600 text-white">
      <h2 class="text-xl font-bold">Chat</h2>
      <button id="videoCallBtn" class="bg-white text-blue-600 px-4 py-2 rounded-lg font-semibold hover:bg-blue-100">
        📹 Start Call
      </button>
    </div>

    <!-- Chat Messages -->
    <div id="message-container" class="flex-1 p-4 overflow-y-auto bg-gray-50">
      <p class="text-gray-400 text-center nobody">Waiting for a partner...</p>
    </div>

    <!-- Chat Input -->
    <form id="chatform" class="flex border-t border-gray-300">
      <input type="text" id="messagebox" class="flex-1 px-4 py-3 focus:outline-none" placeholder="Type a message..." />
      <button type="submit" class="bg-blue-600 text-white px-6 py-3 hover:bg-blue-700">Send</button>
    </form>
  </div>

  <!-- Incoming Call Popup -->
  <div id="incomingCall" class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white rounded-xl p-6 text-center w-80 shadow-xl">
      <p class="text-lg font-semibold mb-4">📞 Incoming Call...</p>
      <div class="flex justify-around">
        <button id="acceptCall" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600">Accept</button>
        <button id="rejectCall" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">Reject</button>
      </div>
    </div>
  </div>

  <!-- Video Call Section -->
  <div id="videoContainer" class="hidden fixed inset-0 bg-black flex items-center justify-center">
    <div class="relative w-full max-w-4xl h-[80vh] bg-gray-900 rounded-2xl overflow-hidden shadow-2xl">
      <video id="remoteVideo" autoplay playsinline class="w-full h-full object-cover"></video>
      <video id="localVideo" autoplay muted playsinline class="absolute bottom-4 right-4 w-40 h-28 rounded-lg shadow-xl border-2 border-white"></video>
      <button id="endCall" class="absolute top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-lg">End Call</button>
    </div>
  </div>

  <script>
    const socket = io();
    const chatform = document.querySelector("#chatform");
    const messagebox = document.querySelector("#messagebox");
    const messagecontainer = document.querySelector("#message-container");

    let room, localStream, peerConnection;

    socket.emit("joinroom");

    socket.on("joined", function (roomname) {
      room = roomname;
      const nobody = document.querySelector(".nobody");
      if (nobody) nobody.classList.add("hidden");
    });

    // ✅ Handle messages
    socket.on("message", function (data) {
      if (data.self) {
        attachMessage(data.message);
      } else {
        receiveMessage(data.message);
      }
    });

    chatform.addEventListener("submit", function (event) {
      event.preventDefault();
      if (!messagebox.value.trim()) return;
      socket.emit("message", { room: room, message: messagebox.value });
      messagebox.value = "";
    });

    function attachMessage(message) {
      const userMessageContainer = document.createElement('div');
      userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

      const userMessageDiv = document.createElement('div');
      userMessageDiv.classList.add('bg-blue-600', 'text-white', 'p-3', 'rounded-xl', 'max-w-xs', 'shadow-md');

      userMessageDiv.textContent = message;
      userMessageContainer.appendChild(userMessageDiv);

      messagecontainer.appendChild(userMessageContainer);
      messagecontainer.scrollTop = messagecontainer.scrollHeight;
    }

    function receiveMessage(message) {
      const messageContainer = document.createElement('div');
      messageContainer.classList.add('flex', 'my-2', 'justify-start');

      const messageDiv = document.createElement('div');
      messageDiv.classList.add('bg-gray-200', 'text-gray-900', 'p-3', 'rounded-xl', 'max-w-xs', 'shadow-md');

      messageDiv.textContent = message;
      messageContainer.appendChild(messageDiv);

      messagecontainer.appendChild(messageContainer);
      messagecontainer.scrollTop = messagecontainer.scrollHeight;
    }

    // 🎥 Video Call Logic
    const videoCallBtn = document.getElementById("videoCallBtn");
    const incomingCall = document.getElementById("incomingCall");
    const acceptCallBtn = document.getElementById("acceptCall");
    const rejectCallBtn = document.getElementById("rejectCall");
    const videoContainer = document.getElementById("videoContainer");
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");
    const endCallBtn = document.getElementById("endCall");

    videoCallBtn.addEventListener("click", () => {
      socket.emit("startVideoCall", { room });
    });

    socket.on("incomingCall", () => {
      incomingCall.classList.remove("hidden");
    });

    acceptCallBtn.addEventListener("click", async () => {
      incomingCall.classList.add("hidden");
      socket.emit("acceptCall", { room });
      await startVideo(true);
    });

    rejectCallBtn.addEventListener("click", () => {
      incomingCall.classList.add("hidden");
      socket.emit("rejectCall", { room });
      alert("❌ Call Rejected");
    });

    socket.on("callAccepted", async () => {
      await startVideo(false);
    });

    socket.on("callRejected", () => {
      alert("❌ Your call was rejected");
    });

    async function startVideo(isReceiver) {
      videoContainer.classList.remove("hidden");
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;

      peerConnection = new RTCPeerConnection({
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" } // ✅ Added STUN server for NAT traversal
        ]
      });

      // Add local tracks
      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      // Get remote stream
      peerConnection.ontrack = e => {
        if (remoteVideo.srcObject !== e.streams[0]) {
          remoteVideo.srcObject = e.streams[0];
        }
      };

      // Send ICE candidates
      peerConnection.onicecandidate = e => {
        if (e.candidate) {
          socket.emit("signalingMessage", { room, message: { candidate: e.candidate } });
        }
      };

      if (!isReceiver) {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("signalingMessage", { room, message: { offer } });
      }
    }

    socket.on("signalingMessage", async data => {
      if (data.offer) {
        if (!peerConnection) await startVideo(true);
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("signalingMessage", { room, message: { answer } });
      } else if (data.answer) {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
      } else if (data.candidate) {
        try {
          await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        } catch (err) {
          console.error("Error adding candidate", err);
        }
      }
    });

    endCallBtn.addEventListener("click", () => {
      videoContainer.classList.add("hidden");
      if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
      }
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
      }
    });
  </script>
</body>
</html>
